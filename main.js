/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ (() => {

eval("/* eslint-disable no-loop-func */\n/* eslint-disable no-else-return */\n/* eslint-disable array-callback-return */\n/* eslint-disable consistent-return */\n/* eslint-disable no-plusplus */\n// create 4 one-square ships\n// 3 - two-square ships\n// 2 - three-square ships\n// 1 - four-square ship\n\nconst Ship = (coordinates) => {\n  let shipLength = coordinates.length;\n  const location = [...coordinates];\n  // check if a ship is on the board\n  const isOnTheBoard = () =>\n    coordinates.every((item) => {\n      if (item[0] >= 0 && item[1] >= 0 && item[0] <= 9 && item[1] <= 9) {\n        return true;\n      }\n    });\n\n  // cb functions for checkCoordinates()\n  const sameXcb = (value, index, array) => {\n    console.log(value);\n    if (\n      array[index + 1] === undefined ||\n      Math.abs(value[1] - array[index + 1][1]) === 1\n    ) {\n      return true;\n    }\n  };\n  const sameYcb = (value, index, array) => {\n    console.log(value);\n    if (\n      array[index + 1] === undefined ||\n      Math.abs(value[0] - array[index + 1][0]) === 1\n    ) {\n      return true;\n    }\n  };\n\n  const checkCoordinates = () => {\n    /*  \n    coordinates: if x is the same then y can only differ by 1\n                 if y is the same then x can only differ by 1\n    */\n    if (coordinates.length === 1) {\n      return true;\n    }\n    // if x is the same....\n    if (coordinates[0][0] === coordinates[1][0]) {\n      return coordinates.every(sameXcb);\n    }\n    // if y is the same...\n    if (coordinates[0][1] === coordinates[1][1]) {\n      return coordinates.every(sameYcb);\n    }\n    return false;\n  };\n\n  const isSunk = () => console.log(\"Ship is sunk!\");\n\n  const wasHit = () => {\n    console.log(shipLength);\n    shipLength -= 1;\n    if (shipLength === 0) {\n      isSunk();\n    }\n  };\n\n  return { location, wasHit, checkCoordinates, isOnTheBoard };\n};\n\n// gameboard will take ships locations as an array\nconst Gameboard = () => {\n  const shipsLocations = [];\n  // const missedShots = [];\n  // const sunkenShips = [];\n\n  // gameboard should have two coordinates X and Y which are represented by numbers\n  // from 0 to 9, and look like [0,0], [0,1]... next line [1,0], [1,1]...\n  const createBoard = () => {\n    const board = [];\n    let x = 0;\n    while (x < 10) {\n      for (let y = 0; y < 10; y++) {\n        board.push([x, y]);\n      }\n      x++;\n    }\n    console.log(board);\n    return board;\n  };\n  // put the ships on the board (in random places)\n  const put1squareShips = () => {\n    // 4 x 1-square ships\n    const ship1square = [];\n    for (let i = 0; i < 4; i++) {\n      const x = Math.floor(Math.random() * 10);\n      const y = Math.floor(Math.random() * 10);\n      const firstSquare = [x, y];\n      ship1square.push(firstSquare);\n    }\n    return ship1square;\n  };\n  // DONE!//make checking function universal or adaptive for any type of ship\n\n  // const checkOverlaping = (shipArr, square) => {\n  //   if (shipArr.length === 0) {\n  //     return false;\n  //   } else {\n  //     return shipArr[0].some(\n  //       (value) => square[0] === value[0] && square[1] === value[1]\n  //     );\n  //   }\n  // };\n  const checkOverlaping = (shipArr, square) => {\n    const result = [];\n    if (shipArr.length === 0) {\n      return false;\n    } else {\n      // console.log(shipArr);\n      shipArr.forEach((item) => {\n        result.push(\n          item.some((value) => square[0] === value[0] && square[1] === value[1])\n        );\n      });\n    }\n    // console.log(result);\n    return result.some((value) => value === true);\n  };\n  // calculate neighbours for 3 squares ship\n  const calcNeighbourSquares = (firstSquare, dir) => {\n    const result = [];\n    if (dir === \"x\") {\n      const a = [firstSquare[0], firstSquare[1] - 1];\n      const b = [firstSquare[0] + 1, firstSquare[1] - 1];\n      const c = [firstSquare[0] + 2, firstSquare[1] - 1];\n      const d = [firstSquare[0] + 3, firstSquare[1] - 1];\n      const e = [firstSquare[0] + 3, firstSquare[1]];\n      const f = [firstSquare[0] + 3, firstSquare[1] + 1];\n      const g = [firstSquare[0] + 2, firstSquare[1] + 1];\n      const h = [firstSquare[0] + 1, firstSquare[1] + 1];\n      const j = [firstSquare[0], firstSquare[1] + 1];\n      const k = [firstSquare[0] - 1, firstSquare[1] + 1];\n      const l = [firstSquare[0] - 1, firstSquare[1]];\n      const m = [firstSquare[0] - 1, firstSquare[1] - 1];\n      result.push(a, b, c, d, e, f, g, h, j, k, l, m);\n    } else if (dir === \"y\") {\n      const a = [firstSquare[0], firstSquare[1] - 1];\n      const b = [firstSquare[0] + 1, firstSquare[1] - 1];\n      const c = [firstSquare[0] + 1, firstSquare[1]];\n      const d = [firstSquare[0] + 1, firstSquare[1] + 1];\n      const e = [firstSquare[0] + 1, firstSquare[1] + 2];\n      const f = [firstSquare[0] + 1, firstSquare[1] + 3];\n      const g = [firstSquare[0], firstSquare[1] + 3];\n      const h = [firstSquare[0] - 1, firstSquare[1] + 3];\n      const j = [firstSquare[0] - 1, firstSquare[1] + 2];\n      const k = [firstSquare[0] - 1, firstSquare[1] + 1];\n      const l = [firstSquare[0] - 1, firstSquare[1]];\n      const m = [firstSquare[0] - 1, firstSquare[1] - 1];\n      result.push(a, b, c, d, e, f, g, h, j, k, l, m);\n    }\n    return result;\n  };\n\n  // recursive function for 3 squares ship\n  const shipSquares = [];\n  const nextToSquares = [];\n\n  const make3sqShips = () => {\n    if (shipSquares.length === 5) {\n      console.log(\"Ship squares:\");\n      console.log(shipSquares);\n      console.log(\"Neigbour squares:\");\n      console.log(nextToSquares);\n      return shipSquares;\n    } else {\n      // define x,y and the first square of the ship\n      const x = Math.floor(Math.random() * 10);\n      const y = Math.floor(Math.random() * 10);\n      const firstSquare = [x, y];\n      // define the second and the third squares\n      let secondSquare;\n      let thirdSquare;\n      // randomly choose the direction\n      const dirXY = Math.floor(Math.random() * 2); // 1 = x, 0 = y\n      const dirPlusMinus = Math.floor(Math.random() * 2); // 1 = plus, 0 = minus\n      if (dirXY) {\n        // also check for coordinates to do not go over 9 or be less then 0\n        if ((dirPlusMinus && firstSquare[0] < 2) || firstSquare[0] < 8) {\n          secondSquare = [x + 1, y];\n          thirdSquare = [x + 2, y];\n          // calculate all the neighbour squares and push to subarray\n          nextToSquares.push(calcNeighbourSquares(firstSquare, \"x\"));\n        } else {\n          secondSquare = [x - 1, y];\n          thirdSquare = [x - 2, y];\n          // calculate all the neighbour squares and push to subarray\n          nextToSquares.push(calcNeighbourSquares(thirdSquare, \"x\"));\n        }\n        // if some of the squares overlaps the previous ship - repeat from the beginning\n        if (\n          checkOverlaping(shipSquares, firstSquare) ||\n          checkOverlaping(shipSquares, secondSquare) ||\n          checkOverlaping(shipSquares, thirdSquare)\n        ) {\n          return make3sqShips();\n        } else {\n          shipSquares.push([firstSquare, secondSquare, thirdSquare]);\n          return make3sqShips();\n        }\n      } else {\n        // also check for coordinates to do not go over 9 or be less then 0\n        if ((dirPlusMinus && firstSquare[1] < 2) || firstSquare[1] < 8) {\n          secondSquare = [x, y + 1];\n          thirdSquare = [x, y + 2];\n          // calculate all the neighbour squares and push to subarray\n          nextToSquares.push(calcNeighbourSquares(firstSquare, \"y\"));\n        } else {\n          secondSquare = [x, y - 1];\n          thirdSquare = [x, y - 2];\n          // calculate all the neighbour squares and push to subarray\n          nextToSquares.push(calcNeighbourSquares(thirdSquare, \"y\"));\n        }\n        // if some of the squares overlaps the previous ship - repeat from the beginning\n        if (\n          checkOverlaping(shipSquares, firstSquare) ||\n          checkOverlaping(shipSquares, secondSquare) ||\n          checkOverlaping(shipSquares, thirdSquare)\n        ) {\n          return make3sqShips();\n        } else {\n          shipSquares.push([firstSquare, secondSquare, thirdSquare]);\n          return make3sqShips();\n        }\n      }\n    }\n  };\n\n  const make4sqShip = () => {};\n\n  const put3squareShips = () => {\n    // DONE!// 3-square ships x 2\n    // DONE!// the existing ship should inlcude a subarray with all the squares around it\n    // next checks should be applied to the firstSquare\n    // DONE!// check for ships to not cross each others\n    // the firstSquare shouldn't be in the existing ship and also shouldn't be next to other ship FUCK\n    // the secondSquare and thirdSquare shouldn't be there either\n    // maybe take a ship array and its subarray and subtract all the squares from the createBoard function\n    // like this I only can use the rest of the squares\n    const ship3squares = [];\n    // create a subarray with the squares around the ship\n    const neigbourSquares = [];\n    for (let i = 0; i < 2; i++) {\n      // const x = Math.floor(Math.random() * 10);\n      // const y = Math.floor(Math.random() * 10);\n      // const firstSquare = [x, y];\n\n      // if (!(ship3squares.length === 0)) {\n      //   ship3squares[0].some(\n      //     (item) => firstSquare[0] === item[0] && firstSquare[1] === item[1]\n      //   );\n      //   neigbourSquares[0].some(\n      //     (item) => firstSquare[0] === item[0] && firstSquare[1] === item[1]\n      //   );\n      // }\n\n      let x;\n      let y;\n      let firstSquare;\n      if (ship3squares.length === 0) {\n        x = Math.floor(Math.random() * 10);\n        y = Math.floor(Math.random() * 10);\n        firstSquare = [x, y];\n      } else {\n        // check if the firstSquare crosses other ships\n        x = Math.floor(Math.random() * 10);\n        y = Math.floor(Math.random() * 10);\n        firstSquare = [x, y];\n        // make a function where .some() will be inside it\n        while (\n          ship3squares[0].some(\n            (item) => firstSquare[0] === item[0] && firstSquare[1] === item[1]\n          ) ||\n          neigbourSquares[0].some(\n            (item) => firstSquare[0] === item[0] && firstSquare[1] === item[1]\n          )\n        ) {\n          x = Math.floor(Math.random() * 10);\n          y = Math.floor(Math.random() * 10);\n          firstSquare = [x, y];\n        }\n      }\n\n      let secondSquare;\n      let thirdSquare;\n      // randomly choose the direction\n      const dirXY = Math.floor(Math.random() * 2); // 1 = x, 0 = y\n      const dirPlusMinus = Math.floor(Math.random() * 2); // 1 = plus, 0 = minus\n      if (dirXY) {\n        // also check for coordinates to do not go over 9 and less then 0\n        if ((dirPlusMinus && firstSquare[0] < 2) || firstSquare[0] < 8) {\n          secondSquare = [x + 1, y];\n          thirdSquare = [x + 2, y];\n          // calculate and push to subarray all the neighbour squares\n          const a = [firstSquare[0], firstSquare[1] - 1];\n          const b = [firstSquare[0] + 1, firstSquare[1] - 1];\n          const c = [firstSquare[0] + 2, firstSquare[1] - 1];\n          const d = [firstSquare[0] + 3, firstSquare[1] - 1];\n          const e = [firstSquare[0] + 3, firstSquare[1]];\n          const f = [firstSquare[0] + 3, firstSquare[1] + 1];\n          const g = [firstSquare[0] + 2, firstSquare[1] + 1];\n          const h = [firstSquare[0] + 1, firstSquare[1] + 1];\n          const j = [firstSquare[0], firstSquare[1] + 1];\n          const k = [firstSquare[0] - 1, firstSquare[1] + 1];\n          const l = [firstSquare[0] - 1, firstSquare[1]];\n          const m = [firstSquare[0] - 1, firstSquare[1] - 1];\n          neigbourSquares.push([a, b, c, d, e, f, g, h, j, k, l, m]);\n        } else {\n          secondSquare = [x - 1, y];\n          thirdSquare = [x - 2, y];\n          // calculate and push to subarray all the neighbour squares\n          const a = [firstSquare[0], firstSquare[1] - 1];\n          const b = [firstSquare[0] + 1, firstSquare[1] - 1];\n          const c = [firstSquare[0] + 2, firstSquare[1] - 1];\n          const d = [firstSquare[0] + 3, firstSquare[1] - 1];\n          const e = [firstSquare[0] + 3, firstSquare[1]];\n          const f = [firstSquare[0] + 3, firstSquare[1] + 1];\n          const g = [firstSquare[0] + 2, firstSquare[1] + 1];\n          const h = [firstSquare[0] + 1, firstSquare[1] + 1];\n          const j = [firstSquare[0], firstSquare[1] + 1];\n          const k = [firstSquare[0] - 1, firstSquare[1] + 1];\n          const l = [firstSquare[0] - 1, firstSquare[1]];\n          const m = [firstSquare[0] - 1, firstSquare[1] - 1];\n          neigbourSquares.push([a, b, c, d, e, f, g, h, j, k, l, m]);\n        }\n        console.log(\"Original batch:\");\n        console.log(checkOverlaping(ship3squares, firstSquare));\n        console.log(checkOverlaping(ship3squares, secondSquare));\n        console.log(checkOverlaping(ship3squares, thirdSquare));\n        console.log(\"Testing batch:\");\n        console.log(checkOverlaping2(ship3squares, firstSquare));\n        console.log(checkOverlaping2(ship3squares, secondSquare));\n        console.log(checkOverlaping2(ship3squares, thirdSquare));\n        ship3squares.push([firstSquare, secondSquare, thirdSquare]);\n      } else {\n        // also check for coordinates to do not go over 9 and less then 0\n        if ((dirPlusMinus && firstSquare[1] < 2) || firstSquare[1] < 8) {\n          secondSquare = [x, y + 1];\n          thirdSquare = [x, y + 2];\n          // calculate and push to subarray all the neighbour squares\n          const a = [firstSquare[0], firstSquare[1] - 1];\n          const b = [firstSquare[0] + 1, firstSquare[1] - 1];\n          const c = [firstSquare[0] + 1, firstSquare[1]];\n          const d = [firstSquare[0] + 1, firstSquare[1] + 1];\n          const e = [firstSquare[0] + 1, firstSquare[1] + 2];\n          const f = [firstSquare[0] + 1, firstSquare[1] + 3];\n          const g = [firstSquare[0], firstSquare[1] + 3];\n          const h = [firstSquare[0] - 1, firstSquare[1] + 3];\n          const j = [firstSquare[0] - 1, firstSquare[1] + 2];\n          const k = [firstSquare[0] - 1, firstSquare[1] + 1];\n          const l = [firstSquare[0] - 1, firstSquare[1]];\n          const m = [firstSquare[0] - 1, firstSquare[1] - 1];\n          neigbourSquares.push([a, b, c, d, e, f, g, h, j, k, l, m]);\n        } else {\n          secondSquare = [x, y - 1];\n          thirdSquare = [x, y - 2];\n          // calculate and push to subarray all the neighbour squares\n          const a = [firstSquare[0], firstSquare[1] - 1];\n          const b = [firstSquare[0] + 1, firstSquare[1] - 1];\n          const c = [firstSquare[0] + 1, firstSquare[1]];\n          const d = [firstSquare[0] + 1, firstSquare[1] + 1];\n          const e = [firstSquare[0] + 1, firstSquare[1] + 2];\n          const f = [firstSquare[0] + 1, firstSquare[1] + 3];\n          const g = [firstSquare[0], firstSquare[1] + 3];\n          const h = [firstSquare[0] - 1, firstSquare[1] + 3];\n          const j = [firstSquare[0] - 1, firstSquare[1] + 2];\n          const k = [firstSquare[0] - 1, firstSquare[1] + 1];\n          const l = [firstSquare[0] - 1, firstSquare[1]];\n          const m = [firstSquare[0] - 1, firstSquare[1] - 1];\n          neigbourSquares.push([a, b, c, d, e, f, g, h, j, k, l, m]);\n        }\n        console.log(\"Original batch:\");\n        console.log(checkOverlaping(ship3squares, firstSquare));\n        console.log(checkOverlaping(ship3squares, secondSquare));\n        console.log(checkOverlaping(ship3squares, thirdSquare));\n        console.log(\"Testing batch:\");\n        console.log(checkOverlaping2(ship3squares, firstSquare));\n        console.log(checkOverlaping2(ship3squares, secondSquare));\n        console.log(checkOverlaping2(ship3squares, thirdSquare));\n        ship3squares.push([firstSquare, secondSquare, thirdSquare]);\n      }\n    }\n\n    console.log(\"Ship squares:\");\n    console.log(ship3squares);\n    console.log(\"Neigbour squares:\");\n    console.log(neigbourSquares);\n    return ship3squares;\n  };\n  // show an array with created ships\n  const showShips = () => shipSquares;\n\n  // const receiveAttack = (coordinates) => {\n  // if coordinates in the shipsLocations - mark as hit\n  // else add it to missedShots\n  // if ship is destroyed add it to sunken ships\n  // };\n  return {\n    createBoard,\n    put1squareShips,\n    put3squareShips,\n    make3sqShips,\n    showShips,\n  };\n};\n\n// const ship1 = Ship([\n//   [2, 2],\n//   [1, 2],\n// ]);\n// const ship2 = Ship([\n//   [2, 5],\n//   [2, 6],\n//   [2, 7],\n// ]);\n\nconst board = Gameboard();\n\n// board.put3squareShips();\nboard.make3sqShips();\n// console.log(board.showShips());\n// ship1.wasHit();\n// ship1.wasHit();\n\n// const board = Gameboard(ship1);\n// console.log(board.shipsLocations);\n\n\n//# sourceURL=webpack://odin-battleship/./src/index.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/index.js"]();
/******/ 	
/******/ })()
;