/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/game.js":
/*!*********************!*\
  !*** ./src/game.js ***!
  \*********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _gameboard__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./gameboard */ \"./src/gameboard.js\");\n/* harmony import */ var _player__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./player */ \"./src/player.js\");\n\n\n\nconst player1 = (0,_player__WEBPACK_IMPORTED_MODULE_1__[\"default\"])();\nconst player2 = (0,_player__WEBPACK_IMPORTED_MODULE_1__[\"default\"])();\nconst shipsIndex1 = [];\nconst shipsIndex2 = [];\nconst board1 = (0,_gameboard__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(player1.myShips);\nconst board2 = (0,_gameboard__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(player2.myShips);\n\nconst Game = () => {\n  // call for all the necessary selectors from DOM\n  const playerStatus = document.querySelector(\".player-status\");\n  const placeShipsStatus = document.querySelector(\".place-ships-status\");\n  const gameStatus = document.querySelector(\".game-status\");\n  const gameMode = document.querySelector(\".game-mode\");\n  const boardCells1 = document.querySelectorAll(\".board-cell-1\");\n  const boardCells2 = document.querySelectorAll(\".board-cell-2\");\n  const placeShipsYourselfBtn = document.querySelector(\n    \".place-ships-yourself-btn\"\n  );\n  const placeShipsRandomlyBtn = document.querySelector(\n    \".place-ships-randomly-btn\"\n  );\n  const confirmBtn = document.querySelector(\".confirm-btn\");\n  const placeShipBtn = document.querySelector(\".place-ship\");\n  const hideShipsBtn = document.querySelector(\".hide-ships\");\n  const showShipsBtn = document.querySelector(\".show-ships\");\n  const playWithComputerBtn = document.querySelector(\".play-with-computer-btn\");\n  const playWithFriendBtn = document.querySelector(\".play-with-friend-btn\");\n\n  // toggle the status of a current turn\n  const changeStatus = () => {\n    if (gameMode.innerText === \"PvC\") {\n      if (playerStatus.innerText === \"Player-1 plays\") {\n        playerStatus.innerText = \"Computer plays\";\n      } else if (playerStatus.innerText === \"Computer plays\") {\n        playerStatus.innerText = \"Player-1 plays\";\n      }\n    } else if (gameMode.innerText === \"PvP\") {\n      if (playerStatus.innerText === \"Player-1 plays\") {\n        playerStatus.innerText = \"Player-2 plays\";\n      } else if (playerStatus.innerText === \"Player-2 plays\") {\n        playerStatus.innerText = \"Player-1 plays\";\n      }\n    }\n  };\n  // hide ships\n  const hideShips = () => {\n    boardCells1.forEach((item) => {\n      if (item.classList.contains(\"ship\")) {\n        item.classList.remove(\"ship\");\n      }\n    });\n  };\n  // show ships\n  const showShips = () => {\n    if (playerStatus.innerText === \"Player-1 plays\") {\n      shipsIndex1.forEach((item) => {\n        boardCells1[item].classList.add(\"ship\");\n      });\n    } else if (playerStatus.innerText === \"Player-2 plays\") {\n      shipsIndex2.forEach((item) => {\n        boardCells1[item].classList.add(\"ship\");\n      });\n    }\n  };\n  // toggle the second board\n  const toggleSecondBoard = () => {\n    if (playerStatus.innerText === \"Player-1 plays\") {\n      boardCells2.forEach((item) => {\n        if (item.classList.contains(\"missed\")) {\n          item.classList.remove(\"missed\");\n        }\n        if (item.classList.contains(\"hit\")) {\n          item.classList.remove(\"hit\");\n        }\n        if (item.classList.contains(\"sunk\")) {\n          item.classList.remove(\"sunk\");\n        }\n      });\n      // line below changed to Destructuring assignement\n      // const missedShots = board2.missedShots;\n      const { missedShots } = board2;\n      missedShots.forEach((value) => {\n        boardCells2.forEach((item) => {\n          if (+item.dataset.x === value[0] && +item.dataset.y === value[1]) {\n            item.classList.add(\"missed\");\n          }\n        });\n      });\n      const { hitShips } = board2;\n      hitShips.forEach((value) => {\n        boardCells2.forEach((item) => {\n          if (+item.dataset.x === value[0] && +item.dataset.y === value[1]) {\n            item.classList.add(\"hit\");\n          }\n        });\n      });\n      const sunkShips = board2.sunkenShipsReg;\n      sunkShips.forEach((value) => {\n        value[0].forEach((element) => {\n          boardCells2.forEach((item) => {\n            if (\n              +item.dataset.x === element[0] &&\n              +item.dataset.y === element[1]\n            ) {\n              item.classList.add(\"sunk\");\n            }\n          });\n        });\n      });\n    } else if (\n      playerStatus.innerText === \"Player-2 plays\" ||\n      playerStatus.innerText === \"Computer plays\"\n    ) {\n      boardCells2.forEach((item) => {\n        if (item.classList.contains(\"missed\")) {\n          item.classList.remove(\"missed\");\n        }\n        if (item.classList.contains(\"hit\")) {\n          item.classList.remove(\"hit\");\n        }\n        if (item.classList.contains(\"sunk\")) {\n          item.classList.remove(\"sunk\");\n        }\n      });\n      const { missedShots } = board1;\n      missedShots.forEach((value) => {\n        boardCells2.forEach((item) => {\n          if (+item.dataset.x === value[0] && +item.dataset.y === value[1]) {\n            item.classList.add(\"missed\");\n          }\n        });\n      });\n      const { hitShips } = board1;\n      hitShips.forEach((value) => {\n        boardCells2.forEach((item) => {\n          if (+item.dataset.x === value[0] && +item.dataset.y === value[1]) {\n            item.classList.add(\"hit\");\n          }\n        });\n      });\n\n      const sunkShips = board1.sunkenShipsReg;\n      sunkShips.forEach((value) => {\n        value[0].forEach((element) => {\n          boardCells2.forEach((item) => {\n            if (\n              +item.dataset.x === element[0] &&\n              +item.dataset.y === element[1]\n            ) {\n              item.classList.add(\"sunk\");\n            }\n          });\n        });\n      });\n    }\n  };\n  // change the player's turn\n  const changeTurn = () => {\n    changeStatus();\n    hideShips();\n    toggleSecondBoard();\n    if (gameStatus.innerText === `Can't put more ships!`) {\n      gameStatus.innerText = \"Placing ships...\";\n    }\n  };\n  // handle the button for random placement of ships\n  const handleRandomPlacement = () => {\n    if (playerStatus.innerText === \"Player-1 plays\") {\n      placeShipsYourselfBtn.disabled = true;\n      placeShipsRandomlyBtn.disabled = true;\n      player1.createShipsRandomly();\n    } else if (playerStatus.innerText === \"Player-2 plays\") {\n      gameStatus.innerText = \"Placing ships...\";\n      placeShipsYourselfBtn.disabled = true;\n      placeShipsRandomlyBtn.disabled = true;\n      player2.createShipsRandomly();\n    }\n  };\n  // handle the button for manual placement of ships\n  const handleManualPlacement = () => {\n    if (playerStatus.innerText === \"Player-1 plays\") {\n      placeShipsYourselfBtn.disabled = true;\n      placeShipsRandomlyBtn.disabled = true;\n      placeShipsStatus.style.padding = \"1rem 0\";\n      player1.createShipsYourself();\n    } else if (playerStatus.innerText === \"Player-2 plays\") {\n      gameStatus.innerText = \"Placing ships...\";\n      placeShipsYourselfBtn.disabled = true;\n      placeShipsRandomlyBtn.disabled = true;\n      player2.createShipsYourself();\n    }\n  };\n  // handle the button the confirms the placement of all ships\n  const handleConfirmPlacement = () => {\n    if (playerStatus.innerText === \"Player-1 plays\") {\n      player1.myShips.forEach((item) => {\n        item.forEach((value) => {\n          boardCells1.forEach((element, index) => {\n            if (\n              +element.dataset.x === value[0] &&\n              +element.dataset.y === value[1]\n            ) {\n              element.classList.remove(\"ghost-ship\");\n              element.classList.add(\"ship\");\n              shipsIndex1.push(index);\n            }\n          });\n        });\n      });\n      // for PvC mode\n      if (gameMode.innerText === \"PvC\") {\n        player1.removeEvents();\n        confirmBtn.style.display = \"none\";\n        player2.createShipsRandomly();\n        player2.myShips.forEach((item) => {\n          item.forEach((value) => {\n            boardCells1.forEach((element, index) => {\n              if (\n                +element.dataset.x === value[0] &&\n                +element.dataset.y === value[1]\n              ) {\n                element.classList.remove(\"ghost-ship\");\n                element.classList.add(\"ship\");\n                shipsIndex2.push(index);\n              }\n            });\n          });\n        });\n        placeShipsYourselfBtn.style.display = \"none\";\n        placeShipsRandomlyBtn.style.display = \"none\";\n        gameStatus.innerText = \"Game on!\";\n        placeShipBtn.style.display = \"none\";\n        hideShipsBtn.style.display = \"flex\";\n        showShipsBtn.style.display = \"flex\";\n        placeShipsStatus.innerText = \"\";\n        placeShipsStatus.style.padding = \"0\";\n        changeTurn();\n      }\n      changeTurn();\n      player1.removeEvents();\n      confirmBtn.style.display = \"none\";\n      placeShipsYourselfBtn.disabled = false;\n      placeShipsRandomlyBtn.disabled = false;\n    } else if (playerStatus.innerText === \"Player-2 plays\") {\n      player2.myShips.forEach((item) => {\n        item.forEach((value) => {\n          boardCells1.forEach((element, index) => {\n            if (\n              +element.dataset.x === value[0] &&\n              +element.dataset.y === value[1]\n            ) {\n              element.classList.remove(\"ghost-ship\");\n              element.classList.add(\"ship\");\n              shipsIndex2.push(index);\n            }\n          });\n        });\n      });\n      changeTurn();\n      player2.removeEvents();\n      confirmBtn.style.display = \"none\";\n    }\n    if (shipsIndex1.length > 0 && shipsIndex2.length > 0) {\n      placeShipsYourselfBtn.style.display = \"none\";\n      placeShipsRandomlyBtn.style.display = \"none\";\n      gameStatus.innerText = \"Game on!\";\n      placeShipBtn.style.display = \"none\";\n      hideShipsBtn.style.display = \"flex\";\n      showShipsBtn.style.display = \"flex\";\n      placeShipsStatus.innerText = \"\";\n      placeShipsStatus.style.padding = \"0\";\n    }\n  };\n  // PC attack function\n  const attackFromPC = (newCoordinates = null) => {\n    // for PvC mode\n    if (gameMode.innerText === \"PvC\") {\n      if (\n        newCoordinates === null ||\n        newCoordinates[0] > 9 ||\n        newCoordinates[0] < 0 ||\n        newCoordinates[1] > 9 ||\n        newCoordinates[1] < 0\n      ) {\n        // eslint-disable-next-line no-param-reassign\n        newCoordinates = [\n          Math.floor(Math.random() * 10),\n          Math.floor(Math.random() * 10),\n        ];\n      }\n      const newAttackStatus = board1.receiveAttack(newCoordinates);\n      if (newAttackStatus === \"Missed\") {\n        boardCells2.forEach((element) => {\n          if (\n            +element.dataset.x === newCoordinates[0] &&\n            +element.dataset.y === newCoordinates[1]\n          ) {\n            if (\n              element.classList.contains(\"missed\") ||\n              element.classList.contains(\"sunk\") ||\n              element.classList.contains(\"hit\")\n            ) {\n              attackFromPC();\n            } else {\n              element.classList.add(\"missed\");\n              setTimeout(changeTurn, 500);\n            }\n          }\n        });\n      } else if (newAttackStatus === \"Winner\") {\n        const sunkenShip =\n          board1.sunkenShipsReg[board1.sunkenShipsReg.length - 1][0];\n        sunkenShip.forEach((value) => {\n          boardCells2.forEach((item) => {\n            if (+item.dataset.x === value[0] && +item.dataset.y === value[1]) {\n              item.classList.add(\"sunk\");\n            }\n          });\n        });\n        playerStatus.innerText = \"Computer Wins!\";\n      } else if (newAttackStatus === \"Hit\") {\n        boardCells2.forEach((element) => {\n          if (\n            +element.dataset.x === newCoordinates[0] &&\n            +element.dataset.y === newCoordinates[1]\n          ) {\n            if (\n              element.classList.contains(\"hit\") ||\n              element.classList.contains(\"sunk\") ||\n              element.classList.contains(\"missed\")\n            ) {\n              attackFromPC();\n            } else {\n              element.classList.add(\"hit\");\n              const tempArr = [\n                [newCoordinates[0] + 1, newCoordinates[1]],\n                [newCoordinates[0] - 1, newCoordinates[1]],\n                [newCoordinates[0], newCoordinates[1] + 1],\n                [newCoordinates[0], newCoordinates[1] - 1],\n              ];\n              const neighbourSquare =\n                tempArr[Math.floor(Math.random() * tempArr.length)];\n              setTimeout(() => {\n                attackFromPC(neighbourSquare);\n              }, 500);\n            }\n          }\n        });\n      } else if (newAttackStatus === \"Sunk\") {\n        const sunkenShip =\n          board1.sunkenShipsReg[board1.sunkenShipsReg.length - 1][0];\n        sunkenShip.forEach((value) => {\n          boardCells2.forEach((item) => {\n            if (+item.dataset.x === value[0] && +item.dataset.y === value[1]) {\n              item.classList.add(\"sunk\");\n            }\n          });\n        });\n        setTimeout(attackFromPC, 500);\n      }\n    }\n  };\n  // mark attacks on the second gameboard\n  const markAttacks = (event, board, attackStatus) => {\n    if (attackStatus === \"Missed\") {\n      event.target.classList.add(\"missed\");\n      if (gameMode.innerText === \"PvC\") {\n        setTimeout(changeTurn, 300);\n        setTimeout(attackFromPC, 500);\n      } else {\n        setTimeout(changeTurn, 300);\n      }\n    } else if (attackStatus === \"Winner\") {\n      const sunkenShip =\n        board.sunkenShipsReg[board.sunkenShipsReg.length - 1][0];\n      sunkenShip.forEach((value) => {\n        boardCells2.forEach((item) => {\n          if (+item.dataset.x === value[0] && +item.dataset.y === value[1]) {\n            item.classList.add(\"sunk\");\n          }\n        });\n      });\n      playerStatus.innerText = \"Player 1 Wins!\";\n    } else if (attackStatus === \"Hit\") {\n      event.target.classList.add(\"hit\");\n    } else if (attackStatus === \"Sunk\") {\n      const sunkenShip =\n        board.sunkenShipsReg[board.sunkenShipsReg.length - 1][0];\n      sunkenShip.forEach((value) => {\n        boardCells2.forEach((item) => {\n          if (+item.dataset.x === value[0] && +item.dataset.y === value[1]) {\n            item.classList.add(\"sunk\");\n          }\n        });\n      });\n    }\n  };\n  // handle attacks made by human players\n  const handleAttack = (event) => {\n    if (\n      gameStatus.innerText === \"Placing ships...\" ||\n      event.target.classList.contains(\"outer-board-cell-x\") ||\n      event.target.classList.contains(\"outer-board-cell-y\") ||\n      event.target.classList.contains(\"missed\") ||\n      event.target.classList.contains(\"hit\") ||\n      event.target.classList.contains(\"sunk\")\n    ) {\n      return;\n    }\n    const { x } = event.target.dataset;\n    const { y } = event.target.dataset;\n    const coordinates = [+x, +y];\n    if (playerStatus.innerText === \"Player-1 plays\") {\n      const attackStatus = board2.receiveAttack(coordinates);\n      markAttacks(event, board2, attackStatus);\n    } else if (playerStatus.innerText === \"Player-2 plays\") {\n      const attackStatus = board1.receiveAttack(coordinates);\n      markAttacks(event, board1, attackStatus);\n    }\n  };\n  // set the PvC mode\n  const switchToPvC = () => {\n    gameMode.innerText = \"PvC\";\n    placeShipsRandomlyBtn.style.display = \"flex\";\n    placeShipsYourselfBtn.style.display = \"flex\";\n    playWithFriendBtn.style.display = \"none\";\n    playWithComputerBtn.style.display = \"none\";\n  };\n  // set the PvP mode\n  const switchToPvP = () => {\n    gameMode.innerText = \"PvP\";\n    placeShipsRandomlyBtn.style.display = \"flex\";\n    placeShipsYourselfBtn.style.display = \"flex\";\n    playWithFriendBtn.style.display = \"none\";\n    playWithComputerBtn.style.display = \"none\";\n  };\n  return {\n    hideShips,\n    showShips,\n    handleRandomPlacement,\n    handleManualPlacement,\n    handleConfirmPlacement,\n    handleAttack,\n    switchToPvC,\n    switchToPvP,\n  };\n};\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Game);\n\n\n//# sourceURL=webpack://odin-battleship/./src/game.js?");

/***/ }),

/***/ "./src/gameboard.js":
/*!**************************!*\
  !*** ./src/gameboard.js ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* eslint-disable no-plusplus */\nconst Gameboard = (shipsArr) => {\n  const shipsLocations = shipsArr;\n  const hitShips = [];\n  const missedShots = [];\n  const sunkenShipsReg = [];\n  // hitShipsReg [length, index, coordinates...]\n  const hitShipsReg = [\n    [4, 0],\n    [3, 1],\n    [3, 2],\n    [2, 3],\n    [2, 4],\n    [2, 5],\n    [1, 6],\n    [1, 7],\n    [1, 8],\n    [1, 9],\n  ];\n\n  // takes ship coordinates, and hit coordinates, and returns true if the ship was hit\n  const isHit = (ship, coordinates) =>\n    ship.some(\n      (value) => value[0] === coordinates[0] && value[1] === coordinates[1]\n    );\n  // return true if the ship sunk\n  const isSunk = () => {\n    let result = false;\n    hitShipsReg.forEach((value) => {\n      if (value[value.length - 2] === value.length - 2) {\n        if (!value.includes(\"Sunk\")) {\n          result = true;\n          value.push(\"Sunk\");\n        }\n      }\n    });\n    return result;\n  };\n  // records hit ships\n  const recordHit = (index, coordinates) => {\n    hitShipsReg.forEach((element) => {\n      if (element[element.length - 1] === index) {\n        element.unshift(coordinates);\n      }\n    });\n  };\n  // check if all the ships were sunken\n  const checkWinner = (sunkShips) => {\n    if (sunkShips.length === 10) {\n      return true;\n    }\n    return false;\n  };\n  // handles attack and return \"Missed\", \"Hit\", \"Sunk\", or \"Winner\"\n  const receiveAttack = (coordinates) => {\n    let sunkCheck = false;\n    shipsLocations.forEach((item, index) => {\n      if (isHit(item, coordinates)) {\n        // record hit ships\n        recordHit(index, coordinates);\n        hitShips.push(coordinates);\n        // check if the ship is sunk\n        if (isSunk()) {\n          sunkenShipsReg.push([item, index]);\n          sunkCheck = true;\n        }\n      }\n    });\n    // record missing shots\n    if (\n      !hitShipsReg.some(\n        (value) =>\n          value[0][0] === coordinates[0] && value[0][1] === coordinates[1]\n      )\n    ) {\n      missedShots.push(coordinates);\n      return \"Missed\";\n      // eslint-disable-next-line no-else-return\n    } else if (sunkCheck) {\n      if (checkWinner(sunkenShipsReg)) {\n        return \"Winner\";\n      }\n      return \"Sunk\";\n    } else {\n      return \"Hit\";\n    }\n  };\n  return {\n    receiveAttack,\n    shipsLocations,\n    hitShipsReg,\n    missedShots,\n    sunkenShipsReg,\n    hitShips,\n  };\n};\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Gameboard);\n\n\n//# sourceURL=webpack://odin-battleship/./src/gameboard.js?");

/***/ }),

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _player__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./player */ \"./src/player.js\");\n/* harmony import */ var _game__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./game */ \"./src/game.js\");\n\n\n\n// place ships yourself\nconst placeShipBtn = document.querySelector(\".place-ship\");\nconst placeShipsYourselfBtn = document.querySelector(\n  \".place-ships-yourself-btn\"\n);\nplaceShipBtn.addEventListener(\"click\", (0,_player__WEBPACK_IMPORTED_MODULE_0__[\"default\"])().handlePlaceShipBtn);\nplaceShipsYourselfBtn.addEventListener(\"click\", (0,_game__WEBPACK_IMPORTED_MODULE_1__[\"default\"])().handleManualPlacement);\n// place ships randomly\nconst placeShipsRandomlyBtn = document.querySelector(\n  \".place-ships-randomly-btn\"\n);\nplaceShipsRandomlyBtn.addEventListener(\"click\", (0,_game__WEBPACK_IMPORTED_MODULE_1__[\"default\"])().handleRandomPlacement);\n// confirm ships placement\nconst confirmBtn = document.querySelector(\".confirm-btn\");\nconfirmBtn.addEventListener(\"click\", (0,_game__WEBPACK_IMPORTED_MODULE_1__[\"default\"])().handleConfirmPlacement);\n// hide and show ships on your gameboard (ships are hidden by default)\nconst hideShipsBtn = document.querySelector(\".hide-ships\");\nconst showShipsBtn = document.querySelector(\".show-ships\");\nhideShipsBtn.addEventListener(\"click\", (0,_game__WEBPACK_IMPORTED_MODULE_1__[\"default\"])().hideShips);\nshowShipsBtn.addEventListener(\"click\", (0,_game__WEBPACK_IMPORTED_MODULE_1__[\"default\"])().showShips);\n// attack the opponent\nconst gameboard2 = document.querySelector(\".gameboard-2\");\ngameboard2.addEventListener(\"click\", (0,_game__WEBPACK_IMPORTED_MODULE_1__[\"default\"])().handleAttack);\n// choose the game mode play with computer or play with a friend\nconst playWithComputerBtn = document.querySelector(\".play-with-computer-btn\");\nconst playWithFriendBtn = document.querySelector(\".play-with-friend-btn\");\nplayWithComputerBtn.addEventListener(\"click\", (0,_game__WEBPACK_IMPORTED_MODULE_1__[\"default\"])().switchToPvC);\nplayWithFriendBtn.addEventListener(\"click\", (0,_game__WEBPACK_IMPORTED_MODULE_1__[\"default\"])().switchToPvP);\n\n\n//# sourceURL=webpack://odin-battleship/./src/index.js?");

/***/ }),

/***/ "./src/player.js":
/*!***********************!*\
  !*** ./src/player.js ***!
  \***********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _ship__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ship */ \"./src/ship.js\");\n/* eslint-disable consistent-return */\n/* eslint-disable default-case */\n\n\nconst Player = () => {\n  const placeShipsStatus = document.querySelector(\".place-ships-status\");\n  const gameboard1 = document.querySelector(\".gameboard-1\");\n  const boardCells1 = document.querySelectorAll(\".board-cell-1\");\n  const placeShipBtn = document.querySelector(\".place-ship\");\n  const playerStatus = document.querySelector(\".player-status\");\n  const confirmBtn = document.querySelector(\".confirm-btn\");\n  const gameStatus = document.querySelector(\".game-status\");\n  const myShips = [];\n\n  // help-functions to createShips()\n  // defines the length of the ship that will be created\n  const defineLength = (shipsArr) => {\n    if (shipsArr.length < 1) {\n      return 4;\n    }\n    if (shipsArr.length >= 1 && shipsArr.length < 3) {\n      return 3;\n    }\n    if (shipsArr.length >= 3 && shipsArr.length < 6) {\n      return 2;\n    }\n    if (shipsArr.length >= 6 && shipsArr.length <= 10) {\n      return 1;\n    }\n    return false;\n  };\n  // checks if the ships goes out of the board\n  const checkLength = (firstSquare, length, dir) => {\n    if (dir === \"x\") {\n      switch (length) {\n        case 4:\n          return (\n            firstSquare[0] + 3 > 9 ||\n            firstSquare[0] + 2 > 9 ||\n            firstSquare[0] + 1 > 9\n          );\n        case 3:\n          return firstSquare[0] + 2 > 9 || firstSquare[0] + 1 > 9;\n        case 2:\n          return firstSquare[0] + 1 > 9;\n        case 1:\n          return false;\n      }\n    } else if (dir === \"y\") {\n      switch (length) {\n        case 4:\n          return (\n            firstSquare[1] + 3 > 9 ||\n            firstSquare[1] + 2 > 9 ||\n            firstSquare[1] + 1 > 9\n          );\n        case 3:\n          return firstSquare[1] + 2 > 9 || firstSquare[1] + 1 > 9;\n        case 2:\n          return firstSquare[1] + 1 > 9;\n        case 1:\n          return false;\n      }\n    }\n  };\n  // places ghost ship during manual ships' placement\n  const placeGhostShip = (firstSquare, dir, length) => {\n    const elArr = [];\n    let tempArr = [];\n    if (checkLength(firstSquare, length, dir)) {\n      return false;\n    }\n    if (dir === \"x\") {\n      boardCells1.forEach((element) => {\n        if (element.classList.contains(\"ship\")) {\n          return false;\n        }\n        if (\n          +element.dataset.x === firstSquare[0] &&\n          +element.dataset.y === firstSquare[1]\n        ) {\n          elArr.push(element);\n        }\n        if (\n          +element.dataset.x === firstSquare[0] + 1 &&\n          +element.dataset.y === firstSquare[1]\n        ) {\n          elArr.push(element);\n        }\n        if (\n          +element.dataset.x === firstSquare[0] + 2 &&\n          +element.dataset.y === firstSquare[1]\n        ) {\n          elArr.push(element);\n        }\n        if (\n          +element.dataset.x === firstSquare[0] + 3 &&\n          +element.dataset.y === firstSquare[1]\n        ) {\n          elArr.push(element);\n        }\n      });\n    } else if (dir === \"y\") {\n      boardCells1.forEach((element) => {\n        if (\n          checkLength(firstSquare, length, dir) ||\n          element.classList.contains(\"ship\")\n        ) {\n          return false;\n        }\n        if (\n          +element.dataset.x === firstSquare[0] &&\n          +element.dataset.y === firstSquare[1]\n        ) {\n          elArr.push(element);\n        }\n        if (\n          +element.dataset.x === firstSquare[0] &&\n          +element.dataset.y === firstSquare[1] + 1\n        ) {\n          elArr.push(element);\n        }\n        if (\n          +element.dataset.x === firstSquare[0] &&\n          +element.dataset.y === firstSquare[1] + 2\n        ) {\n          elArr.push(element);\n        }\n        if (\n          +element.dataset.x === firstSquare[0] &&\n          +element.dataset.y === firstSquare[1] + 3\n        ) {\n          elArr.push(element);\n        }\n      });\n    }\n    switch (length) {\n      case 4:\n        tempArr = [...elArr];\n        break;\n      case 3:\n        tempArr = [elArr[0], elArr[1], elArr[2]];\n        break;\n      case 2:\n        tempArr = [elArr[0], elArr[1]];\n        break;\n      case 1:\n        tempArr = [elArr[0]];\n        break;\n    }\n\n    tempArr.forEach((item) => item.classList.add(\"ghost-ship\"));\n    return tempArr;\n  };\n\n  // an array of nodes for the current ship\n  let ship = [];\n  // get tools for making a new ship\n  const shipFactory = (0,_ship__WEBPACK_IMPORTED_MODULE_0__[\"default\"])();\n  const shipsArr = shipFactory.shipSquares;\n  const { neighbourSquares } = shipFactory;\n  // default direction is on x axis\n  let newShipDirection = \"x\";\n  // handle a button that places the ship that was just created\n  const handlePlaceShipBtn = () => {\n    // if the first square wasn't chosen then nothing happens\n    if (!ship.length) {\n      return false;\n    }\n    const tempShipArr = [];\n    let tempNeighbArr = [];\n    // extract coordinates from nodes and push them to tempShipArr\n    ship.forEach((item) => {\n      const xItem = +item.dataset.x;\n      const yItem = +item.dataset.y;\n      tempShipArr.push([xItem, yItem]);\n    });\n    // calculate neighbour squares for the new ship\n    tempNeighbArr = [\n      ...shipFactory.calcNeighbourSquares(\n        tempShipArr[0],\n        tempShipArr.length,\n        newShipDirection\n      ),\n    ];\n    // check if the new ship overlapps other ships\n    if (\n      tempShipArr.some(\n        (item) =>\n          shipFactory.checkOverlapping(shipFactory.shipSquares, item) ||\n          shipFactory.checkOverlapping(shipFactory.neighbourSquares, item)\n      )\n    ) {\n      placeShipsStatus.innerText = \"Cannot place ship here!\";\n      return false;\n    }\n    ship.forEach((item) => {\n      item.classList.remove(\"ghost-ship\");\n      item.classList.add(\"ship\");\n    });\n    shipsArr.push(tempShipArr);\n    neighbourSquares.push(tempNeighbArr);\n    const length = defineLength(shipsArr);\n    if (placeShipsStatus !== null) {\n      placeShipsStatus.innerText = `Click on the first square of\\n your ${length}-square ship.\\nDouble click to change\\n the direction.`;\n    }\n\n    // stop creating ships when all the ships are placed\n    if (shipsArr.length === 10) {\n      if (playerStatus.innerText === \"Player-1 plays\") {\n        shipFactory.showShips().forEach((item) => myShips.push(item));\n        gameStatus.innerText = \"All ships are here.\";\n        placeShipsStatus.innerText =\n          \"All your ships are here!\\n Press Confirm!\";\n        placeShipBtn.style.display = \"none\";\n        confirmBtn.style.display = \"flex\";\n      } else if (playerStatus.innerText === \"Player-2 plays\") {\n        shipFactory.showShips().forEach((item) => myShips.push(item));\n        gameStatus.innerText = \"All ships are here.\";\n        placeShipsStatus.innerText =\n          \"All your ships are here!\\n Press Confirm!\";\n        placeShipBtn.style.display = \"none\";\n        confirmBtn.style.display = \"flex\";\n      }\n    }\n    return tempShipArr;\n  };\n  // handle gameboard 1 for manual ships placement\n  const handleGameboard1 = (event) => {\n    if (\n      event.target.classList.contains(\"outer-board-cell-x\") ||\n      event.target.classList.contains(\"outer-board-cell-y\") ||\n      gameStatus.innerText === \"Game on!\" ||\n      gameStatus.innerText === \"All ships are here.\"\n    ) {\n      return;\n    }\n    boardCells1.forEach((item) => {\n      if (item.classList.contains(\"ghost-ship\")) {\n        item.classList.remove(\"ghost-ship\");\n      }\n    });\n    const { x } = event.target.dataset;\n    const { y } = event.target.dataset;\n    const firstSquare = [+x, +y];\n    const length = defineLength(shipsArr);\n    placeShipsStatus.innerText = `Click on the first square of\\n your ${length}-square ship.\\nDouble click to change\\n the direction.`;\n    // shade possible\n    if (placeGhostShip(firstSquare, newShipDirection, length)) {\n      ship = [...placeGhostShip(firstSquare, newShipDirection, length)];\n    } else {\n      return false;\n    }\n    // change ship's direction by with a double click\n    event.target.addEventListener(\"click\", () => {\n      if (newShipDirection === \"x\") {\n        newShipDirection = \"y\";\n      } else if (newShipDirection === \"y\") {\n        newShipDirection = \"x\";\n      }\n    });\n  };\n  // create ships manually\n  const createShipsYourself = () => {\n    placeShipBtn.style.display = \"flex\";\n    placeShipsStatus.innerText = `Click on the first square of\\n your 4-square ship.\\nDouble click to change\\n the direction.`;\n    placeShipBtn.addEventListener(\"click\", handlePlaceShipBtn);\n    gameboard1.addEventListener(\"click\", handleGameboard1);\n  };\n  // create ships randomly\n  const createShipsRandomly = () => {\n    confirmBtn.style.display = \"flex\";\n    shipFactory.autoMakeShips();\n\n    shipFactory.shipSquares.forEach((item) => {\n      item.forEach((value) => {\n        boardCells1.forEach((element) => {\n          if (\n            +element.dataset.x === value[0] &&\n            +element.dataset.y === value[1]\n          ) {\n            element.classList.add(\"ghost-ship\");\n          }\n        });\n      });\n    });\n    shipFactory.showShips().forEach((item) => myShips.push(item));\n  };\n  // remove events from \"Place ship\" button and gameboard1\n  const removeEvents = () => {\n    placeShipBtn.removeEventListener(\"click\", handlePlaceShipBtn);\n    gameboard1.removeEventListener(\"click\", handleGameboard1);\n  };\n\n  return {\n    ship,\n    handlePlaceShipBtn,\n    createShipsYourself,\n    createShipsRandomly,\n    myShips,\n    removeEvents,\n  };\n};\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Player);\n\n\n//# sourceURL=webpack://odin-battleship/./src/player.js?");

/***/ }),

/***/ "./src/ship.js":
/*!*********************!*\
  !*** ./src/ship.js ***!
  \*********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* eslint-disable no-plusplus */\n/* eslint-disable default-case */\nconst Ship = () => {\n  const shipSquares = [];\n  const neighbourSquares = [];\n  // auxiliary functions\n  // check if a created ships overlaps existing ships\n  const checkOverlapping = (shipArr, square) => {\n    const result = [];\n    if (shipArr.length === 0 || shipArr === undefined) {\n      return false;\n    }\n    shipArr.forEach((item) => {\n      result.push(\n        item.some((value) => square[0] === value[0] && square[1] === value[1])\n      );\n    });\n    return result.some((value) => value === true);\n  };\n  // calculate squares that are right next to a ship\n  const calcNeighbourSquares = (firstSquare, shipLength, dir = \"x\") => {\n    const result = [];\n    if (dir === \"x\") {\n      // for 1 square ship: a, b, f, k, l, m, n, o\n      // for 2 square ship: a, b, c, f, j, k, l, m, n, o\n      // for 3 square ship: a, b, c, d, f, h, j, k, l, m, n, o\n      const a = [firstSquare[0], firstSquare[1] - 1];\n      const b = [firstSquare[0] + 1, firstSquare[1] - 1];\n      const c = [firstSquare[0] + 2, firstSquare[1] - 1];\n      const d = [firstSquare[0] + 3, firstSquare[1] - 1];\n      const e = [firstSquare[0] + 4, firstSquare[1] - 1];\n      const f = [firstSquare[0] + shipLength, firstSquare[1]];\n      const g = [firstSquare[0] + 4, firstSquare[1] + 1];\n      const h = [firstSquare[0] + 3, firstSquare[1] + 1];\n      const j = [firstSquare[0] + 2, firstSquare[1] + 1];\n      const k = [firstSquare[0] + 1, firstSquare[1] + 1];\n      const l = [firstSquare[0], firstSquare[1] + 1];\n      const m = [firstSquare[0] - 1, firstSquare[1] + 1];\n      const n = [firstSquare[0] - 1, firstSquare[1]];\n      const o = [firstSquare[0] - 1, firstSquare[1] - 1];\n      switch (shipLength) {\n        case 1:\n          result.push(a, b, f, k, l, m, n, o);\n          break;\n        case 2:\n          result.push(a, b, c, f, j, k, l, m, n, o);\n          break;\n        case 3:\n          result.push(a, b, c, d, f, h, j, k, l, m, n, o);\n          break;\n        case 4:\n          result.push(a, b, c, d, e, f, g, h, j, k, l, m, n, o);\n          break;\n      }\n    } else if (dir === \"y\") {\n      // for 2 square ship: a, b, c, d, e, h, l, m, n, o\n      // for 3 square ship: a, b, c, d, e, f, h, k, l, m, n, o\n      const a = [firstSquare[0], firstSquare[1] - 1];\n      const b = [firstSquare[0] + 1, firstSquare[1] - 1];\n      const c = [firstSquare[0] + 1, firstSquare[1]];\n      const d = [firstSquare[0] + 1, firstSquare[1] + 1];\n      const e = [firstSquare[0] + 1, firstSquare[1] + 2];\n      const f = [firstSquare[0] + 1, firstSquare[1] + 3];\n      const g = [firstSquare[0] + 1, firstSquare[1] + 4];\n      const h = [firstSquare[0], firstSquare[1] + shipLength];\n      const j = [firstSquare[0] - 1, firstSquare[1] + 4];\n      const k = [firstSquare[0] - 1, firstSquare[1] + 3];\n      const l = [firstSquare[0] - 1, firstSquare[1] + 2];\n      const m = [firstSquare[0] - 1, firstSquare[1] + 1];\n      const n = [firstSquare[0] - 1, firstSquare[1]];\n      const o = [firstSquare[0] - 1, firstSquare[1] - 1];\n      switch (shipLength) {\n        case 2:\n          result.push(a, b, c, d, e, h, l, m, n, o);\n          break;\n        case 3:\n          result.push(a, b, c, d, e, f, h, k, l, m, n, o);\n          break;\n        case 4:\n          result.push(a, b, c, d, e, f, g, h, j, k, l, m, n, o);\n          break;\n      }\n    }\n    return result;\n  };\n  // checks the appropriate number of ships created manually\n  // const checkShipsNum = (length) => {\n  //   let count = 0;\n  //   switch (length) {\n  //     case 4:\n  //       if (shipSquares.length === 0) {\n  //         break;\n  //       }\n  //       shipSquares.forEach((item) => {\n  //         if (item.length === 4) {\n  //           count++;\n  //         }\n  //       });\n  //       if (count >= 1) {\n  //         return false;\n  //       }\n  //       break;\n  //     case 3:\n  //       shipSquares.forEach((item) => {\n  //         if (item.length === 3) {\n  //           count++;\n  //         }\n  //       });\n  //       if (count >= 2) {\n  //         return false;\n  //       }\n  //       break;\n  //     case 2:\n  //       shipSquares.forEach((item) => {\n  //         if (item.length === 2) {\n  //           count++;\n  //         }\n  //       });\n  //       if (count >= 3) {\n  //         return false;\n  //       }\n  //       break;\n  //     case 1:\n  //       shipSquares.forEach((item) => {\n  //         if (item.length === 1) {\n  //           count++;\n  //         }\n  //       });\n  //       if (count >= 4) {\n  //         return false;\n  //       }\n  //       break;\n  //   }\n  //   return true;\n  // };\n\n  // ships building functions\n  const make1sqShip = () => {\n    if (shipSquares.length === 10) {\n      return shipSquares;\n    }\n    // define x,y and the first square of the ship\n    const x = Math.floor(Math.random() * 10);\n    const y = Math.floor(Math.random() * 10);\n    const firstSquare = [x, y];\n    neighbourSquares.push(calcNeighbourSquares(firstSquare, 1));\n    // if some of the squares overlaps the previous ship - repeat from the beginning\n    if (\n      checkOverlapping(shipSquares, firstSquare) ||\n      checkOverlapping(neighbourSquares, firstSquare)\n    ) {\n      neighbourSquares.pop();\n      return make1sqShip();\n      // eslint-disable-next-line no-else-return\n    } else {\n      shipSquares.push([firstSquare]);\n      return make1sqShip();\n    }\n  };\n\n  const make2sqShip = () => {\n    if (shipSquares.length === 6) {\n      return shipSquares;\n    }\n    // define x,y and the first square of the ship\n    const x = Math.floor(Math.random() * 10);\n    const y = Math.floor(Math.random() * 10);\n    const firstSquare = [x, y];\n    // define the second\n    let secondSquare;\n    // randomly choose the direction\n    const dirXY = Math.floor(Math.random() * 2); // 1 = x, 0 = y\n    const dirPlusMinus = Math.floor(Math.random() * 2); // 1 = plus, 0 = minus\n    if (dirXY === 1) {\n      // also check for coordinates to do not go over 9 or be less then 0\n      if ((dirPlusMinus && firstSquare[0] < 1) || firstSquare[0] < 9) {\n        secondSquare = [x + 1, y];\n        // calculate all the neighbour squares and push to subarray\n        neighbourSquares.push(calcNeighbourSquares(firstSquare, 2, \"x\"));\n      } else {\n        secondSquare = [x - 1, y];\n        // calculate all the neighbour squares and push to subarray\n        neighbourSquares.push(calcNeighbourSquares(secondSquare, 2, \"x\"));\n      }\n    } else if (dirXY === 0) {\n      // also check for coordinates to do not go over 9 or be less then 0\n      if ((dirPlusMinus && firstSquare[1] < 1) || firstSquare[1] < 9) {\n        secondSquare = [x, y + 1];\n        // calculate all the neighbour squares and push to subarray\n        neighbourSquares.push(calcNeighbourSquares(firstSquare, 2, \"y\"));\n      } else {\n        secondSquare = [x, y - 1];\n        // calculate all the neighbour squares and push to subarray\n        neighbourSquares.push(calcNeighbourSquares(secondSquare, 2, \"y\"));\n      }\n    }\n    // if some of the squares overlaps the previous ship - repeat from the beginning\n    const ship = [];\n    ship.push(firstSquare, secondSquare);\n    if (\n      ship.some(\n        (item) =>\n          checkOverlapping(shipSquares, item) ||\n          checkOverlapping(neighbourSquares, item)\n      )\n    ) {\n      neighbourSquares.pop();\n      return make2sqShip();\n      // eslint-disable-next-line no-else-return\n    } else {\n      shipSquares.push([firstSquare, secondSquare]);\n      return make2sqShip();\n    }\n  };\n\n  const make3sqShips = () => {\n    if (shipSquares.length === 3) {\n      return shipSquares;\n    }\n    // define x,y and the first square of the ship\n    const x = Math.floor(Math.random() * 10);\n    const y = Math.floor(Math.random() * 10);\n    const firstSquare = [x, y];\n    // define the second and the third squares\n    let secondSquare;\n    let thirdSquare;\n    // randomly choose the direction\n    const dirXY = Math.floor(Math.random() * 2); // 1 = x, 0 = y\n    const dirPlusMinus = Math.floor(Math.random() * 2); // 1 = plus, 0 = minus\n    if (dirXY === 1) {\n      // also check for coordinates to do not go over 9 or be less then 0\n      if ((dirPlusMinus && firstSquare[0] < 2) || firstSquare[0] < 8) {\n        secondSquare = [x + 1, y];\n        thirdSquare = [x + 2, y];\n        // calculate all the neighbour squares and push to subarray\n        neighbourSquares.push(calcNeighbourSquares(firstSquare, 3, \"x\"));\n      } else {\n        secondSquare = [x - 1, y];\n        thirdSquare = [x - 2, y];\n        // calculate all the neighbour squares and push to subarray\n        neighbourSquares.push(calcNeighbourSquares(thirdSquare, 3, \"x\"));\n      }\n    } else if (dirXY === 0) {\n      // also check for coordinates to do not go over 9 or be less then 0\n      if ((dirPlusMinus && firstSquare[1] < 2) || firstSquare[1] < 8) {\n        secondSquare = [x, y + 1];\n        thirdSquare = [x, y + 2];\n        // calculate all the neighbour squares and push to subarray\n        neighbourSquares.push(calcNeighbourSquares(firstSquare, 3, \"y\"));\n      } else {\n        secondSquare = [x, y - 1];\n        thirdSquare = [x, y - 2];\n        // calculate all the neighbour squares and push them to subarray\n        neighbourSquares.push(calcNeighbourSquares(thirdSquare, 3, \"y\"));\n      }\n    }\n    // if some of the squares overlap the previous ship - repeat from the beginning\n    const ship = [];\n    ship.push(firstSquare, secondSquare, thirdSquare);\n    if (\n      ship.some(\n        (item) =>\n          checkOverlapping(shipSquares, item) ||\n          checkOverlapping(neighbourSquares, item)\n      )\n    ) {\n      neighbourSquares.pop();\n      return make3sqShips();\n      // eslint-disable-next-line no-else-return\n    } else {\n      shipSquares.push([firstSquare, secondSquare, thirdSquare]);\n      return make3sqShips();\n    }\n  };\n\n  const make4sqShip = () => {\n    if (shipSquares.length === 1) {\n      return shipSquares;\n    }\n    // define x,y and the first square of the ship\n    const x = Math.floor(Math.random() * 10);\n    const y = Math.floor(Math.random() * 10);\n    const firstSquare = [x, y];\n    // define the second, the third squares, and the fourth\n    let secondSquare;\n    let thirdSquare;\n    let fourthSquare;\n    // randomly choose the direction\n    const dirXY = Math.floor(Math.random() * 2); // 1 = x, 0 = y\n    const dirPlusMinus = Math.floor(Math.random() * 2); // 1 = plus, 0 = minus\n    if (dirXY === 1) {\n      // also check for coordinates to do not go over 9 or be less then 0\n      if ((dirPlusMinus && firstSquare[0] < 3) || firstSquare[0] < 7) {\n        secondSquare = [x + 1, y];\n        thirdSquare = [x + 2, y];\n        fourthSquare = [x + 3, y];\n        // calculate all the neighbour squares and push to subarray\n        neighbourSquares.push(calcNeighbourSquares(firstSquare, 4, \"x\"));\n      } else {\n        secondSquare = [x - 1, y];\n        thirdSquare = [x - 2, y];\n        fourthSquare = [x - 3, y];\n        // calculate all the neighbour squares and push to subarray\n        neighbourSquares.push(calcNeighbourSquares(fourthSquare, 4, \"x\"));\n      }\n    } else if (dirXY === 0) {\n      // also check for coordinates to do not go over 9 or be less then 0\n      if ((dirPlusMinus && firstSquare[1] < 3) || firstSquare[1] < 7) {\n        secondSquare = [x, y + 1];\n        thirdSquare = [x, y + 2];\n        fourthSquare = [x, y + 3];\n        // calculate all the neighbour squares and push to subarray\n        neighbourSquares.push(calcNeighbourSquares(firstSquare, 4, \"y\"));\n      } else {\n        secondSquare = [x, y - 1];\n        thirdSquare = [x, y - 2];\n        fourthSquare = [x, y - 3];\n        // calculate all the neighbour squares and push to subarray\n        neighbourSquares.push(calcNeighbourSquares(fourthSquare, 4, \"y\"));\n      }\n    }\n    // if some of the squares overlaps the previous ship - repeat from the beginning\n    const ship = [];\n    ship.push(firstSquare, secondSquare, thirdSquare, fourthSquare);\n    if (\n      ship.some(\n        (item) =>\n          checkOverlapping(shipSquares, item) ||\n          checkOverlapping(neighbourSquares, item)\n      )\n    ) {\n      neighbourSquares.pop();\n      return make4sqShip();\n      // eslint-disable-next-line no-else-return\n    } else {\n      shipSquares.push([firstSquare, secondSquare, thirdSquare, fourthSquare]);\n      return make4sqShip();\n    }\n  };\n\n  // place all the ships automatically\n  const autoMakeShips = () => {\n    make4sqShip();\n    make3sqShips();\n    make2sqShip();\n    return make1sqShip();\n  };\n\n  // show an array with created ships\n  const showShips = () => shipSquares;\n\n  return {\n    autoMakeShips,\n    showShips,\n    shipSquares,\n    neighbourSquares,\n    checkOverlapping,\n    calcNeighbourSquares,\n  };\n};\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Ship);\n\n\n//# sourceURL=webpack://odin-battleship/./src/ship.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.js");
/******/ 	
/******/ })()
;